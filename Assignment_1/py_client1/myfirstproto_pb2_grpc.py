# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import myfirstproto_pb2 as myfirstproto__pb2


class FrequencyCalculatorStub(object):
    """Define a gRPC service
    A service is a class that holds all the rpc methods we want to be able to use.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Calculate = channel.unary_unary(
                '/FrequencyCalculator/Calculate',
                request_serializer=myfirstproto__pb2.Textk.SerializeToString,
                response_deserializer=myfirstproto__pb2.WordCountList.FromString,
                )
        self.Combine = channel.stream_unary(
                '/FrequencyCalculator/Combine',
                request_serializer=myfirstproto__pb2.WordCount.SerializeToString,
                response_deserializer=myfirstproto__pb2.WordCountList.FromString,
                )


class FrequencyCalculatorServicer(object):
    """Define a gRPC service
    A service is a class that holds all the rpc methods we want to be able to use.
    """

    def Calculate(self, request, context):
        """'Calculate' takes a string as input and returns a list of <key, 1> pairs, where key is a word and value is simply 1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Combine(self, request_iterator, context):
        """'Combine' combines all <key, 1> pairs with the same key by adding their values
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FrequencyCalculatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Calculate': grpc.unary_unary_rpc_method_handler(
                    servicer.Calculate,
                    request_deserializer=myfirstproto__pb2.Textk.FromString,
                    response_serializer=myfirstproto__pb2.WordCountList.SerializeToString,
            ),
            'Combine': grpc.stream_unary_rpc_method_handler(
                    servicer.Combine,
                    request_deserializer=myfirstproto__pb2.WordCount.FromString,
                    response_serializer=myfirstproto__pb2.WordCountList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FrequencyCalculator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FrequencyCalculator(object):
    """Define a gRPC service
    A service is a class that holds all the rpc methods we want to be able to use.
    """

    @staticmethod
    def Calculate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FrequencyCalculator/Calculate',
            myfirstproto__pb2.Textk.SerializeToString,
            myfirstproto__pb2.WordCountList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Combine(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/FrequencyCalculator/Combine',
            myfirstproto__pb2.WordCount.SerializeToString,
            myfirstproto__pb2.WordCountList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
