// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: myfirstproto.proto

package go_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrequencyCalculatorClient is the client API for FrequencyCalculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrequencyCalculatorClient interface {
	// 'Calculate' takes a string as input and returns a list of <key, 1> pairs, where key is a word and value is simply 1
	Calculate(ctx context.Context, in *Textk, opts ...grpc.CallOption) (*WordCountList, error)
	// 'Combine' combines all <key, 1> pairs with the same key by adding their values
	Combine(ctx context.Context, opts ...grpc.CallOption) (FrequencyCalculator_CombineClient, error)
}

type frequencyCalculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewFrequencyCalculatorClient(cc grpc.ClientConnInterface) FrequencyCalculatorClient {
	return &frequencyCalculatorClient{cc}
}

func (c *frequencyCalculatorClient) Calculate(ctx context.Context, in *Textk, opts ...grpc.CallOption) (*WordCountList, error) {
	out := new(WordCountList)
	err := c.cc.Invoke(ctx, "/FrequencyCalculator/Calculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frequencyCalculatorClient) Combine(ctx context.Context, opts ...grpc.CallOption) (FrequencyCalculator_CombineClient, error) {
	stream, err := c.cc.NewStream(ctx, &FrequencyCalculator_ServiceDesc.Streams[0], "/FrequencyCalculator/Combine", opts...)
	if err != nil {
		return nil, err
	}
	x := &frequencyCalculatorCombineClient{stream}
	return x, nil
}

type FrequencyCalculator_CombineClient interface {
	Send(*WordCount) error
	CloseAndRecv() (*WordCountList, error)
	grpc.ClientStream
}

type frequencyCalculatorCombineClient struct {
	grpc.ClientStream
}

func (x *frequencyCalculatorCombineClient) Send(m *WordCount) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frequencyCalculatorCombineClient) CloseAndRecv() (*WordCountList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WordCountList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrequencyCalculatorServer is the server API for FrequencyCalculator service.
// All implementations must embed UnimplementedFrequencyCalculatorServer
// for forward compatibility
type FrequencyCalculatorServer interface {
	// 'Calculate' takes a string as input and returns a list of <key, 1> pairs, where key is a word and value is simply 1
	Calculate(context.Context, *Textk) (*WordCountList, error)
	// 'Combine' combines all <key, 1> pairs with the same key by adding their values
	Combine(FrequencyCalculator_CombineServer) error
	mustEmbedUnimplementedFrequencyCalculatorServer()
}

// UnimplementedFrequencyCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedFrequencyCalculatorServer struct {
}

func (UnimplementedFrequencyCalculatorServer) Calculate(context.Context, *Textk) (*WordCountList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}
func (UnimplementedFrequencyCalculatorServer) Combine(FrequencyCalculator_CombineServer) error {
	return status.Errorf(codes.Unimplemented, "method Combine not implemented")
}
func (UnimplementedFrequencyCalculatorServer) mustEmbedUnimplementedFrequencyCalculatorServer() {}

// UnsafeFrequencyCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrequencyCalculatorServer will
// result in compilation errors.
type UnsafeFrequencyCalculatorServer interface {
	mustEmbedUnimplementedFrequencyCalculatorServer()
}

func RegisterFrequencyCalculatorServer(s grpc.ServiceRegistrar, srv FrequencyCalculatorServer) {
	s.RegisterService(&FrequencyCalculator_ServiceDesc, srv)
}

func _FrequencyCalculator_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Textk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrequencyCalculatorServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FrequencyCalculator/Calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrequencyCalculatorServer).Calculate(ctx, req.(*Textk))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrequencyCalculator_Combine_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrequencyCalculatorServer).Combine(&frequencyCalculatorCombineServer{stream})
}

type FrequencyCalculator_CombineServer interface {
	SendAndClose(*WordCountList) error
	Recv() (*WordCount, error)
	grpc.ServerStream
}

type frequencyCalculatorCombineServer struct {
	grpc.ServerStream
}

func (x *frequencyCalculatorCombineServer) SendAndClose(m *WordCountList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frequencyCalculatorCombineServer) Recv() (*WordCount, error) {
	m := new(WordCount)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrequencyCalculator_ServiceDesc is the grpc.ServiceDesc for FrequencyCalculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrequencyCalculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FrequencyCalculator",
	HandlerType: (*FrequencyCalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calculate",
			Handler:    _FrequencyCalculator_Calculate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Combine",
			Handler:       _FrequencyCalculator_Combine_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "myfirstproto.proto",
}
